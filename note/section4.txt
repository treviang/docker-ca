Lezione 61: Network orchestration
Gestire il ciclo di vita dei container in reti ampie.
Devono esserci minimo 2 container in esecuzione.
Serve ad esempio a fare in modo che quando un container si è stoppato farne ripartire automaticamente uno nuovo.

Le principali soluzioni di orchestration sono:
- Docker swarm
- Kubernetes
- Elastic Container Service (AWS ECS)

Lezione 62: Docker swarm
Tool di orchestration nativamente supportato da docker.
Es: swarm cluster con 3 nodi

Lezione 63: inizializzare docker swarm
Node è un'istanza del Docker engine partecipante a uno swarm.
Un manager Node che smista il lavoro tra i worker nodes.

Definire uno swarm
- docker swarm init --advertise-addr 142.93.214.57

Vedere i nodi attivi:
- docker node ls

Per aggiungere dei nodi allo swarm:
- docker swarm join --token 32123 142.93.214.57:2337

Lezione 66:
Il service è la definizione nel manager o nei nodi worker dei task che devono essere eseguiti.
Vengono definite le repliche che devono essere presenti.

docker service create --name webserver --replicas 1 nginix

Se ho 2 nodi worker nel mio swarm e ho impostato una replica quando un container viene killato automaticamente lo swarm me ne crea uno nuovo in un atro nodo.

Lezione 68: scaling swarm service
Container che girano in un service sono chiamati task.

Aumentare/diminuire il numero dei service:
- docker service scale webserver=5
- docker service scale webserver=1

Mostra i dettagli del service:
- docker service ps webserver
Rimuove il servizio:
- docker service rm webserver

Lezione 70: Multiple Approaches for Scaling

docker service scale service01=2
docker service update --replicas 2 service02

Entrambi creano 2 repliche del servizio e fanno le stesse operazioni. 
La differenza è che il primo comando permette di scalare più servizi con un'unica istruazione:

docker service scale service01=2 service02=3

Lezione 72: Replicated vs Global Service
Quando creo una replica il task viene associato ad esattamente il numero delle repliche che ho specificato.
Un global service invece fa eseguire un task in ogni nodo. Quando viene aggiunto un nodo allo swarm lo scheduler assigna il task al nuovo nodo.

Esempio:
docker service create --name antivirus --mode global -dt ubuntu

Invece una replica viene creata così:
docker service create myreplica --replicas 1 nginx

Lezione 74: Draining Swarm Node
Effettuare il draining di un nodo significa metterlo in "manutenzione" quindi tutti i task associati vengono messi in "stopped".

- Cambio availability in drain:
docker node update --availability drain swarm03

- Cambio availability in active:
docker node update --availability active swarm03

Lezione 76: Inspecting Swarm Service and Nodes
Docker inspect fornisce informazioni su un docker object.

- docker service inspect <nome-servizio>: lista le informazioni dell'oggetto service specificato
- docker service inspect <nome-servizio> -pretty: presenta le informazioni in un modo maggiormente leggibile

La stessa cosa è possibile farla per i node:

- docker node inspect swarm01 
- docker node inspect swarm01 -pretty

Lezione 78: Publish Ports to Swarm Tasks
Per far accedere ai servizi esposti da un container è necessario esporre le porte dei servizi all'esterno:

- docker service create --name mywebserver --replicas 2 --publish 8080:80 nginx

Lezione 80: Docker Compose
Docker compose permette tramite uno YAML di lanciare uno swarm con determinate caratteristiche

Lanciare uno swarm definito in un docker compose:
- docker-compose up -d

Stoppare uno swarm definito in un docker compose:
- docker-compose down

