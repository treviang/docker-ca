Lezione 53: Networking with docker

Tipi di Network drivers:

- bridge: The default network driver. Bridge networks are usually used when your applications run in standalone containers that need to communicate.
- host: For standalone containers, remove network isolation between the container and the Docker host, and use the host’s networking directly.
- overlay: Overlay networks connect multiple Docker daemons together and enable swarm services to communicate with each other. You can also use overlay networks to facilitate communication between a swarm service and a standalone container, or between two standalone containers on different Docker daemons. This strategy removes the need to do OS-level routing between these containers.
- ipvlan: IPvlan networks give users total control over both IPv4 and IPv6 addressing. The VLAN driver builds on top of that in giving operators complete control of layer 2 VLAN tagging and even IPvlan L3 routing for users interested in underlay network integration.
- macvlan: Macvlan networks allow you to assign a MAC address to a container, making it appear as a physical device on your network. The Docker daemon routes traffic to containers by their MAC addresses. Using the macvlan driver is sometimes the best choice when dealing with legacy applications that expect to be directly connected to the physical network, rather than routed through the Docker host’s network stack.
- none: For this container, disable all networking. Usually used in conjunction with a custom network driver. none is not available for swarm services.

Lezione 54: Bridge networks
Una rete bridge permette ai container collegati di comunicare tra loro mantenendo l'isolamento dal resto dei container.
Per collegarsi ad Internet un container deve passare attraverso il bridge.
Bridge è il tipo di rete di default con cui vengono creati i container.

Es: avvio due container
docker container run -dt --name bridge01 ubuntu
docker container run -dt --name bridge02 ubuntu

bridge01 collegandosi in bash e digitando il comando ifconfig ha ip 172.17.0.3
bridge02 ha ip 172.17.0.4

Andando a osservare la tabela di routing del container bridge01
root@5f50d8389372:/# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0

Si può notare che il bridge 127.17.0.1 è il default gateway per tutti i container nel bridge network.

Lezione 55: User defined bridge networks
E' possibile definire dei propri bridge networks.
docker network ls: permette di vedere la lista delle reti presenti in ambiente docker.

Per creare una bridge network si utilizza il comando:
- docker network create --driver bridge mybridge

Per creare un container all'interno della rete appena creata:
- docker container run -dt --name bridge03 --network mybridge ubuntu

I container all'interno di una user defined bridge possono collegarsi tra loro tramite il loro nome.
DNS resolution è una delle feature della user defined bridge network.

Lezione 56: Host networks
Questo driver permettere di rimuovere l'isolamento tra l'host e il container.
Serve per poter ad esempio osservare l'interfaccia dell'host ospitante che non è visibile in una bridge network.
Esempio applicazione: intrusion detection system

Si crea con l'opzione --network host.
Tutte le porte del computer host vengono "trasferite" al container, quindi tutte le porte in cui il container è in ascolto sono quelle dell'host.

Lezione 57: None network
Usata per disabilitare il networking in un container e non avere accesso a nessuna rete.
Si crea con l'opzione --network none.

Lezione 58: pubblicare le porte in un container
Il comando -P (maiuscolo) espone tutte le porte del container. Ad esempio su un webserver nginx espone la porta 80 in
una porta casuale dell'host.

Lezione 59: Linking containers
docker container run -dt --link container01:container --name container02 busybox sharepoint

link serve per linkare un container per poterlo pingare con il nome nella bridge network di default.
E' un metodo legacy perchè è consigliato utilizzare le user defined networks.
